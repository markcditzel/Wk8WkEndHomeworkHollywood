
New Project

Select Maven

com.codeclan.Hollywwod

Artifcat = Hollywood

Update pom.xml file with dependency - within the <dependencies>

Create and Update HibernateUtil - check db connection URL and mapping class
NB - these need to be continually updated with each addition of a Class

Create DBHelper Class to assist CRUD and basic search functions

Create HibernateUtil Class

Createdb Hollywood

Update Hibernate.cfg to reflect the new db name

Git Commit the basic skeleton of generalised functionality

AIM(1) Establish Abstract Person Class and Child Owener Class

Make Person Class - which will be Abstract

Update hibernate.cfg to incorporate Person class

Make Gender Enum to use with Person class

Cant test an Person Class as it is abstract

WRT DB - all the IV elements need Getters and Setters

MAKE Owner Class inherit from Person

Add Owner class to hibernate.cfg

Make Owner Class extend from Person

Satisfy Superclass requirements in the constructor

Add the Studio studio in the constructor

Create Studio Enum to hold studio names

TDD(1) : Create and Test an Owner
    owner1 created with all necessary properties
    setAge = tested - Parent Abstract Person Class
    setStudio = tested - Child Owner Class
    setGender = tested - Parent Abstract Person Class ENUM

REFACTOR - realised that an ENUM for studio is not a good idea!

REFACTOR - convert Studio ENUM into Class

Full TDD testing using JUNIT in test folder

AIM (2) Establish ONE-TO-ONE RELATIONSHIP between

Need to decide who takes who in their constructor

NB as this can dictate who can be easily queried

The Class holding the foreign object (think foreign key) is the one that cannot be easily queried

The Class that does not hold the foreign object can be easily queried

So - we want to ask "Hey the Studio who is your Owner" - therefore we need to put the Studio into the Owner's constructor

It means that a Owner must have a Studio and a Studio cannot have an Owner - bit weird but will go with it!
















