
New Project

Select Maven

com.codeclan.Hollywwod

Artifcat = Hollywood

Update pom.xml file with dependency - within the <dependencies>

Create and Update HibernateUtil - check db connection URL and mapping class
NB - these need to be continually updated with each addition of a Class

Create DBHelper Class to assist CRUD and basic search functions

Create HibernateUtil Class

Createdb Hollywood

Update Hibernate.cfg to reflect the new db name

Git Commit the basic skeleton of generalised functionality

AIM(1) Establish Abstract Person Class and Child Owener Class

Make Person Class - which will be Abstract

Update hibernate.cfg to incorporate Person class

Make Gender Enum to use with Person class

Cant test an Person Class as it is abstract

WRT DB - all the IV elements need Getters and Setters

MAKE Owner Class inherit from Person

Add Owner class to hibernate.cfg

Make Owner Class extend from Person

Satisfy Superclass requirements in the constructor

Add the Studio studio in the constructor

Create Studio Enum to hold studio names

TDD(1) : Create and Test an Owner
    owner1 created with all necessary properties
    setAge = tested - Parent Abstract Person Class
    setStudio = tested - Child Owner Class
    setGender = tested - Parent Abstract Person Class ENUM

REFACTOR - realised that an ENUM for studio is not a good idea!

REFACTOR - convert Studio ENUM into Class

Full TDD testing using JUNIT in test folder for both Owner and Studion classes

AIM (2) Establish ONE-TO-ONE RELATIONSHIP between

Need to decide who takes who in their constructor

NB as this can dictate who can be easily queried

The Class holding the foreign object (think foreign key) is the one that cannot be easily queried

The Class that does not hold the foreign object can be easily queried

So - we want to ask "Hey the Studio who is your Owner" - therefore we need to put the Studio into the Owner's constructor

It means that a Owner must have a Studio and a Studio cannot have an Owner - bit weird but will go with it!

2.1 Annotate the Person class - to note inheritance

Add an int id instance variable

Add Getter and Setter for id

TDD Test if the id works.

Annonate the id getter with @Id

Add @GeneratedValue(strategy = GenerationType.IDENTITY

Add @Column to other getters for the remaining properties

??? As the children of the Person class will have differnt relationship - i.e. Owner-Studio (ONE-TO-ONE) and Actor-Film (MANY-TO-MANY)

Is it best to specify the distinct relationships withing the downstream / child classes???

Will assume this for now

2.2 Annotate the Owner class

This will be a OneToOne relationship wth the studio

The Owner will hold the studio's foreign key in a JoinColumn called 'studio_id'

We will not allow the entry to be null - this reflects Owner class' constructor's requirment for a studio

2.3 Annotate the Studio class

Update Studio class IV with an Owner owner

Update with getter and setter for Owner

NB - Studio does not take Owner in its constructor or as a this.variable; the setter assigns owner

Add int id to Studio IV

Add getter and setter for id

Annotate id

NB to allow to set ID will have to use polymorphic property - create a Person ownerX = new Owner

Annotate getOwner - ONE-TO-ONE, mappedBy studio; as owner holds the studio's FK

Add #Studio mapping in hibernate

2.4 TDD Test the id of studio and owner

Does owner have an id - will have to set it ourselves in Java model

--> Does studio have an id - will have to set it ourselves in Java model

2.4 Check that the db relationship is functioning

Can we make tables and entries for:

Added temperament to Owner to test if we can retain unique to child IV

Add and annotate as Enumerated, Temperament-associated getter and setters in Owner

#PERSON - add Enumeration annotation to Gender to show the String value instead of ordinal

2.5 Now the basic db is working - test CRUD features for both classes

2.6 Attempt to reinstate the One-to-One relationship between Owner and Studio

If ONE-TO-ONE put on the Owner only = failure

Need to modify and annotate the #Studio class

Add an Owner into the instance variables

<Aim 3> Tackle the Film(has one Director)-Director(has many films)

Know that the Director will hold an arrayList of films - #Director will be the ONE

KNow that a Film will hold a Director - FILM wil be the MANY

Add mapping class = Director and Film to hibernate.cfg

Make #Director class - extends from Person

It will be the ONE

IV = ArrayList is not in constructor - so a Director can have no films associated with them at instantiation

Therefore the films are added via the setter

3.1 Annotate #Director Class with OneToMany mapped by director

3.2 Annotate #Film Class with ManyToOne director_id

Mkae it nullable false - so that every film has to have a director

3.3 Need to add Genre ENUM for Film Class


























